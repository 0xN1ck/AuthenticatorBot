import base64
import binascii
from datetime import timedelta

from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.types import Message, CallbackQuery

from infrastructure.database.repo.requests import RequestsRepo
from tgbot.filters.admin import AdminFilter

from tgbot.keyboards.reply import generate_admin_menu
from tgbot.keyboards.inline import generate_user_key_menu, generate_users_menu, generate_keys_menu
from tgbot.keyboards.inline import MyCallbackData

from aiogram.fsm.context import FSMContext
from tgbot.misc.states import AdminMenuStates

admin_router = Router()
admin_router.message.filter(AdminFilter())


@admin_router.message(CommandStart())
async def admin_start(message: Message):
    admin_menu = await generate_admin_menu()
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω!", reply_markup=admin_menu)


@admin_router.message(Command("reset_state"))
async def admin_start(message: Message, state: FSMContext):
    await state.clear()
    admin_menu = await generate_admin_menu()
    await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ!", reply_markup=admin_menu)


@admin_router.message(lambda message: message.text.startswith("‚ûï\u200B–î–æ–±–∞–≤–∏—Ç—å"))
async def handle_add_button(message: Message):
    add_menu = await generate_user_key_menu('add')
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=add_menu)


@admin_router.message(lambda message: message.text.startswith("‚ûñ\u200B–£–¥–∞–ª–∏—Ç—å"))
async def handle_delete_button(message: Message):
    delete_menu = await generate_user_key_menu('delete')
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_menu)


@admin_router.message(lambda message: message.text.startswith("üëÅÔ∏è\u200B–ü—Ä–æ—Å–º–æ—Ç—Ä"))
async def handle_view_button(message: Message):
    view_menu = await generate_user_key_menu('view')
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=view_menu)


@admin_router.callback_query(StateFilter(None), MyCallbackData.filter())
async def handle_my_callback_query(callback_query: CallbackQuery, callback_data: MyCallbackData,
                                   state: FSMContext, repo: RequestsRepo):
    action = callback_data.action
    target = callback_data.target

    await callback_query.answer()

    if action == 'add':
        if target == 'user':
            await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                                                f"–®–∞–±–ª–æ–Ω –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:\n"
                                                f"<b>user_id:</b> 11111111\n"
                                                f"<b>username:</b> Username\n"
                                                f"<b>full_name:</b> Firstname Lastname\n"
                                                f"<b>chat_id:</b> 11111111 (–¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)")
            await state.set_state(AdminMenuStates.waiting_add_user_data)
        elif target == 'key':
            await callback_query.message.answer(f"<i>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞.</i>\n"
                                                f"<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è:</b> <i>–Ω–∞–ø—Ä–∏–º–µ—Ä,</i> <b>ByBit</b>\n"
                                                f"<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∏–º—è —Å–≤–æ–±–æ–¥–Ω–æ!</b>")
            await state.set_state(AdminMenuStates.waiting_add_key_name_data)

    elif action == 'delete':
        if target == 'user':
            delete_user_menu = await generate_users_menu(action=action, target=target, repo=repo)
            await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                                reply_markup=delete_user_menu)
            await state.set_state(AdminMenuStates.waiting_delete_user_data)
        elif target == 'key':
            delete_key_menu = await generate_keys_menu(action=action, target=target, repo=repo)
            await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞.", reply_markup=delete_key_menu)
            await state.set_state(AdminMenuStates.waiting_delete_key_data)

    elif action == 'view':
        if target == 'user':
            view_user_menu = await generate_users_menu(action=action, target=target, repo=repo)
            await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                                reply_markup=view_user_menu)
            await state.set_state(AdminMenuStates.waiting_view_user_data)
        elif target == 'key':
            view_key_menu = await generate_keys_menu(action=action, target=target, repo=repo)
            await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–∞.", reply_markup=view_key_menu)
            await state.set_state(AdminMenuStates.waiting_view_key_data)


@admin_router.message(AdminMenuStates.waiting_add_user_data)
async def handle_my_user_data_add(message: Message, state: FSMContext, repo: RequestsRepo):
    user_data = message.text.split('\n')

    user_info = {}
    expected_keys = ["user_id", "username", "full_name", "chat_id"]

    for item in user_data:
        try:
            key, value = item.split(': ', 1)
            key = key.lower()
            if key not in expected_keys:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á: {key}")
            user_info[key] = value.strip()
        except ValueError as e:
            await message.answer(f"<b>–û—à–∏–±–∫–∞:</b>\n"
                                 f"<i>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É –∏–ª–∏</i>\n\n"
                                 f"–®–∞–±–ª–æ–Ω –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:\n"
                                 f"<b>user_id:</b> 11111111\n"
                                 f"<b>username:</b> Username\n"
                                 f"<b>full_name:</b> Firstname Lastname\n"
                                 f"<b>chat_id:</b> 11111111\n (–¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)")
            return

    try:
        user = await repo.users.get_or_create_user(user_id=int(user_info['user_id']),
                                                   username=user_info['username'],
                                                   full_name=user_info['full_name'])
        if user:
            await message.answer(
                f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</i> <b>{user_info['username']}</b> <i>—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</i>.\n")
            await message.bot.send_message(chat_id=int(user_info['chat_id']),
                                           text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–ª –í–∞–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n"
                                                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{str(e)}")

    await state.clear()


@admin_router.callback_query(AdminMenuStates.waiting_delete_user_data, MyCallbackData.filter())
async def handle_my_user_data_delete(callback_query: CallbackQuery, callback_data: MyCallbackData, state: FSMContext,
                                     repo: RequestsRepo):
    user_id = int(callback_data.user_id)
    username = callback_data.username

    existing_user = await repo.users.get_user_by_id(user_id)
    if existing_user:
        await repo.users.delete_user_by_id(user_id)
        await callback_query.answer()
        await callback_query.message.answer(f"<i>–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i> <b>{username}</b>.\n\n")
    else:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()


@admin_router.callback_query(AdminMenuStates.waiting_view_user_data, MyCallbackData.filter())
async def handle_my_user_data_view(callback_query: CallbackQuery, callback_data: MyCallbackData, state: FSMContext,
                                   repo: RequestsRepo):
    data_user = await repo.users.get_user_by_id(int(callback_data.user_id))

    await callback_query.answer()

    created_at = (data_user[0].created_at + timedelta(hours=3)).strftime("%Y-%m-%d %H:%M:%S")

    text = (f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> <b>{data_user[0].username}</b>\n"
            f"<i>- ID:</i> <b>{data_user[0].user_id}</b>\n"
            f"<i>- –ò–º—è:</i> <b>{data_user[0].full_name}</b>\n"
            f"<i>- –î–æ–±–∞–≤–ª–µ–Ω:</i> <b>{str(created_at)}</b>")

    await callback_query.message.edit_text(text)
    await state.clear()


@admin_router.message(AdminMenuStates.waiting_add_key_name_data)
async def handle_my_key_name_data_add(message: Message, state: FSMContext, repo: RequestsRepo):
    market_name = message.text.strip()
    market_key = ""  # pyotp.random_base32()

    if await repo.markets.get_market_by_name(market_name):
        await message.answer(f"–ö–ª—é—á c –∏–º–µ–Ω–µ–º <b>{market_name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                             f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –∏–º—è.</b>")
        return

    await state.update_data(market_name=market_name, market_key=market_key)
    await message.answer(
        f"<i>–ò–º—è</i> <b>{market_name}</b> <i>—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É</i>.\n"
        f"<i>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä—É—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è</i> <b>{market_name}</b>.\n"
        f"<b>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É base32</b>\n")

    await state.set_state(AdminMenuStates.waiting_add_key_secret_data)


@admin_router.message(AdminMenuStates.waiting_add_key_secret_data)
async def handle_my_key_secret_data_add(message: Message, state: FSMContext, repo: RequestsRepo):
    key_data = await state.get_data()
    key_data['market_key'] = message.text.strip()

    try:
        base64.b32decode(key_data['market_key'], casefold=True)
    except binascii.Error:
        await message.answer(f"–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á <b>{key_data['market_key']} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.</b>\n"
                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä—Ç–Ω—ã–π –∫–ª—é—á –µ—â–µ —Ä–∞–∑.\n"
                             f"<b>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É base32!</b>")
        return

    await state.update_data(market_key=key_data['market_key'])

    try:
        key = await repo.markets.get_or_create_market(market_name=key_data['market_name'],
                                                      market_key=key_data['market_key'])
        if key:
            await message.answer(
                f"<i>–ö–ª—é—á</i> <b>{key_data['market_name']}</b> <i>—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</i>.\n")
        else:
            await message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ {key_data['market_name']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞:\n{str(e)}")

    await state.clear()


@admin_router.callback_query(AdminMenuStates.waiting_delete_key_data, MyCallbackData.filter())
async def handle_my_key_data_delete(callback_query: CallbackQuery, callback_data: MyCallbackData, state: FSMContext,
                                    repo: RequestsRepo):
    market_name = str(callback_data.market_name)

    existing_key = await repo.markets.get_market_by_name(market_name)

    if existing_key:
        await repo.markets.delete_market_by_name(market_name)
        await callback_query.answer()
        await callback_query.message.answer(f"<i>–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–ª—é—á</i> <b>{market_name}</b>.\n\n")
    else:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: –ö–ª—é—á {market_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()


@admin_router.callback_query(AdminMenuStates.waiting_view_key_data, MyCallbackData.filter())
async def handle_my_key_data_view(callback_query: CallbackQuery, callback_data: MyCallbackData, state: FSMContext,
                                  repo: RequestsRepo):
    data_key = await repo.markets.get_market_by_name(str(callback_data.market_name))

    await callback_query.answer()

    created_at = (data_key.created_at + timedelta(hours=3)).strftime("%Y-%m-%d %H:%M:%S")

    text = (f"<i>–ù–∞–∑–≤–∞–Ω–∏–µ:</i> <b>{str(data_key.market_name)}</b>\n"
            f"<i>- –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:</i> <code>{str(data_key.market_key)}</code>\n"
            f"<i>- –°–æ–∑–¥–∞–Ω:</i> <b>{str(created_at)}</b>")

    await callback_query.message.edit_text(text)
    await state.clear()
